require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe BusOperatorCalificationsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # BusOperatorCalification. As you add validations to BusOperatorCalification, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    FactoryBot.attributes_for(:bus_operator_calification)
  }

  let(:invalid_attributes) {
    FactoryBot.attributes_for(:bus_operator_calification, :invalid)
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # BusOperatorCalificationsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  let!(:bus_operator) { BusOperator.last || FactoryBot.create(:bus_operator) }

  let(:expect_render_404) {
    expect(response.status).to eq 404
    expect(response).to render_template(file: "#{Rails.root}/public/404.html")
  }

  describe "GET #index" do
    let(:califications_qty) { 2 }
    let!(:bus_operator_califications) {
      FactoryBot.create_list(
        :bus_operator_calification,
        califications_qty,
        bus_operator_id:
        bus_operator.to_param
      )
    }

    context "when bus operator does not exist" do
      it "returns a not found response" do
        get :index, params: { bus_operator_id: 0 }, session: valid_session
        expect_render_404
      end
    end

    context "when bus operator does exist" do
      # expect the same califications quantity by default
      let(:expected_califications_qty) { califications_qty }
      # expect the same califications by default
      let(:expected_califications) { bus_operator_califications }
      # ask for page 1 by default
      let(:page) { 1 }

      before :each do
        get :index, params: { bus_operator_id: bus_operator.to_param, page: page }, session: valid_session
      end

      it "returns a success response" do
        expect(response.status).to eq 200
      end

      context "when there are 10 califications (less than 20)" do
        let(:califications_qty) { 10 }
        let(:expected_califications_qty) { 10 }

        it "should assign 10 califications to bus_operator_califications" do end
      end

      context "when there are 20 califications (exactly 20)" do
        let(:califications_qty) { 20 }
        let(:expected_califications_qty) { 20 }

        it "should assign 20 califications to bus_operator_califications" do end
      end

      context "when there are 21 califications (more than 20)" do
        let(:califications_qty) { 21 }

        # expect only the first 20 (all minus the last)
        let(:expected_califications_qty) { 20 }
        let(:expected_califications) { bus_operator_califications.first(20) }

        it "should assign 20 califications to bus_operator_califications" do end

        context "when page is 2" do
          let(:page) { 2 }
          # expect only the last one
          let(:expected_califications_qty) { 1 }
          let(:expected_califications) { [bus_operator_califications.last] }

          it "should assign the last calification to bus_operator_califications" do end
        end
      end

      after :each do
        expect(assigns(:bus_operator_califications)).to eq expected_califications

        # califications are paginated. They should be 20 or less
        expect(assigns(:bus_operator_califications).count).to eq expected_califications_qty
      end
    end
  end

  describe "GET #show" do
    let(:bus_operator_calification) {
      BusOperatorCalification.create! valid_attributes
    }

    it "raises no routes matches error" do
      expect {
        get :show, params: { bus_operator_id: bus_operator.to_param, id: bus_operator_calification.to_param }, session: valid_session
      }.to raise_error ActionController::UrlGenerationError
    end
  end

  describe "GET #new" do
    it "raises no routes matches error" do
      expect {
        get :new, params: { bus_operator_id: bus_operator.to_param }, session: valid_session
      }.to raise_error ActionController::UrlGenerationError
    end
  end

  describe "GET #edit" do
    it "raises no routes matches error" do
      bus_operator_calification = BusOperatorCalification.create! valid_attributes
      expect {
        get :edit, params: {id: bus_operator_calification.to_param}, session: valid_session
      }.to raise_error ActionController::UrlGenerationError
    end
  end

  describe "POST #create" do
    context "when bus operator does not exist" do
      it "returns a not found response" do
        post :create, params: { bus_operator_id: 0, bus_operator_calification: valid_attributes }, session: valid_session
        expect_render_404
      end
    end

    context "when bus operator exists" do
      context "with valid params" do
        it "creates a new BusOperatorCalification" do
          expect {
            post :create, params: { bus_operator_id: bus_operator.to_param, bus_operator_calification: valid_attributes }, session: valid_session
          }.to change(BusOperatorCalification, :count).by(1)

          # check the last one's bus operator is the current one
          expect(BusOperatorCalification.last.bus_operator).to eq bus_operator
        end

        it "redirects to the created bus_operator_calification" do
          post :create, params: { bus_operator_id: bus_operator.to_param, bus_operator_calification: valid_attributes }, session: valid_session
          expect(response).to redirect_to(bus_operator_califications_path)
        end
      end

      context "with invalid params" do
        it "returns a success response (renders again bus operator show template)" do
          post :create, params: { bus_operator_id: bus_operator.to_param, bus_operator_calification: invalid_attributes }, session: valid_session
          expect(response.status).to eq 200
          expect(response).to render_template("bus_operators/show")
        end
      end
    end
  end

  describe "PUT #update" do
    it "raises no routes matches error" do
      bus_operator_calification = BusOperatorCalification.create! valid_attributes
      new_attributes = { rating: 4.5, comment: "any comment" }
      expect {
        put :update, params: { bus_operator_id: bus_operator.to_param, id: bus_operator_calification.to_param, bus_operator_calification: new_attributes}, session: valid_session
      }.to raise_error ActionController::UrlGenerationError
    end
  end

  describe "DELETE #destroy" do
    it "raises no routes matches error" do
      bus_operator_calification = BusOperatorCalification.create! valid_attributes
      expect {
        delete :destroy, params: {bus_operator_id: bus_operator.to_param, id: bus_operator_calification.to_param}, session: valid_session
      }.to raise_error ActionController::UrlGenerationError
    end
  end
end
